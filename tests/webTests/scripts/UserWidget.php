<?php
/**
 * This file was generated by the Alia Toolkit. For more information, please see alia.sourceforge.net
 */



/**
 * UserWidget class
 * 
 * @uses AWidget
 */
class UserWidget extends AWidget{
	const recordClass='User';
	

	


	private $records;
	private $page;
	private $recordsPerPage = 15;


	function __construct($page=1){
		parent::__construct();
		
		$this->defineSignal("nextPage");
		$this->setpage($page);
		$this->fetchRecords();
		$this->buildLayout();


	}
	

	function setPage($page){
		
		
		
		if( $page <1){
			throw new Exception("$page is not a valid page number!");
		}
		$this->page = $page;
			}
	
	function setRecordsPerPage($count){
		if(! is_int($count) || $count <1){
			throw new Exception("$count is not a valid positive number!");
		}
		$this->recordsPerPage = $count;
	}
	
	function fetchRecords(){
		$this->records  = Doctrine_Query::create()
          				->from(self::recordClass." a")
          				->limit($this->recordsPerPage." OFFSET ". ($this->page - 1)*$this->recordsPerPage )
          				->execute();
	}
	

	/**
	 * builds the layout and widgets that go in it. 
	 * 
	 * @access public
	 * @return void
	 */
	function buildLayout(){
		//delete all the old widgets, if any
		if($this->getLayout()){
			$widgets = $this->getLayout()->getWidgets();
			foreach($widgets as $k=>$widget){
				$widget->clearConnections();
				//AObjectRegistry::instance()->unsetObject($widgets[$k]);
				unset($widgets[$k]);
			}
			$layout = $this->getLayout();
		}
		$layout = new AHTMLLayout($this,"/templates/UserWidgetEdit.tpl");
		$this->setLayout($layout);
		$x=0;
		
		foreach($this->records as $record){
			$widget = new UserRecordRow($record);
			$layout->addWidget($widget);
		}
		$button = new APushButton("<< Prev");
		$layout->addWidget($button,"prevButton");
		Alia::connect($button,"clicked",$this,"previousPage");
	
		$button = new APushButton("Next >>");
		$layout->addWidget($button,"nextButton");
		Alia::connect($button,"clicked",$this,"nextPage");


	}

	public function nextPage(){
		$this->changePage(1);
	}
	
	public function previousPage(){
		$this->changePage(1);
	}
	function changePage($direction){
		if($this->page <2 && $direction < 0){
			$this->setPage(1);
		}else{
			$this->setpage($this->page + $direction);
		}
		$this->fetchRecords();
		$this->buildLayout();
		$this->redraw();
	}




}
